version: 2
jobs:
  ### JOBS FOR on-feature-branch-commit PIPELINE
  build-test-repo:
    # machine is needed to run Gradle build and to run docker compose tests
    machine:
      enabled: true

    steps:
      - checkout
      - run: 
          # checking for merge conflicts and merging locally if none exist
          name: merging ${CIRCLE_BRANCH} into develop locally
          command: |
            git config --global user.email "${GIT_USER_EMAIL}" 
            git config --global user.name "${GIT_USER_NAME}"
            git checkout ${CIRCLE_BRANCH}
            git checkout develop 
            git merge ${CIRCLE_BRANCH} -m "Merging ${CIRCLE_BRANCH} into develop."
      # Show the java version installed.
      - run: java -version

      - run:
          name: Pulling Gradle cache
          command: |
            sudo rm -f /etc/boto.cfg # needed to fix gsutil issue in circleci https://github.com/travis-ci/travis-ci/issues/7940
            export CLOUDSDK_CORE_PROJECT=${DEV_PROJECT}
            echo $GOOGLE_GCR_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gsutil cp gs://pi-ostelco-core-gradle-cache/caches.tar.gz ~/caches.tar.gz
            mkdir -p ~/.gradle/caches/
            tar -xzvf ~/caches.tar.gz -C ~/.gradle/caches/ .
      # Copying pantel prod secret to locations where it is needed for docker compose tests.
      - run:
          name: Distribute pantel-prod.json secret from env var.
          command: |
            scripts/distribute-pantel-secrets.sh
      # run gradle build. Skipping neo4j tests as they fail
      - run:
          name: Build entire repo
          command: ./gradlew clean build -info -s -x :neo4j-store:test

      # persisting the entire project with its generated artifacts. They are needed in the build-image job below.
      # the default working directory in circleci is ~/project/
      - persist_to_workspace:
          root: ~/project/
          paths:
            - .

      # generating selfsigned certs. Needed for docker compose tests
      - run:
          name: Generate self signed certs
          command: |
            scripts/generate-selfsigned-ssl-certs.sh   ocs.dev.ostelco.org 
            cp certs/ocs.dev.ostelco.org/nginx.crt ocsgw/config/ocs.crt
            scripts/generate-selfsigned-ssl-certs.sh   metrics.dev.ostelco.org 
            cp certs/metrics.dev.ostelco.org/nginx.crt ocsgw/config/metrics.crt
      - run: 
          name: Acceptance Tests
          command: docker-compose up --build --abort-on-container-exit
      
      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-feature-branch-commit false    

  code-coverage:
    environment:
      CODACY_DOWNLOAD_URL: https://github.com/codacy/codacy-coverage-reporter/releases/download
      CODACY_VERSION: 4.0.1
      CODACY_JAR_FILE: codacy-coverage-reporter-assembly-latest.jar
      CODACY_MODULE: com.codacy.CodacyCoverageReporter
  
    docker:
      - image: circleci/openjdk:8u171-jdk

    steps:
      - run:  
          name: Download codacy
          command: |
            wget -O ~/${CODACY_JAR_FILE} \
              ${CODACY_DOWNLOAD_URL}/${CODACY_VERSION}/codacy-coverage-reporter-${CODACY_VERSION}-assembly.jar
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project  
               
      # the commands below need "CODACY_PROJECT_TOKEN" to be present as (circleci) ENV variable.            
      - run:
          name: Generate Codacy code-coverage report
          command: |
            scripts/generate-codacy-coverage.sh

      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-feature-branch-commit false       
  
  ### JOBS FOR  on-PR-merge-to-dev PIPELINE 
  build-code:
    machine:
      enabled: true

    steps:
      - checkout 
      - run:
          name: Pulling Gradle cache
          command: |
            sudo rm -f /etc/boto.cfg # needed to fix gsutil issue in circleci https://github.com/travis-ci/travis-ci/issues/7940
            export CLOUDSDK_CORE_PROJECT=${DEV_PROJECT}
            echo $GOOGLE_GCR_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gsutil cp gs://pi-ostelco-core-gradle-cache/caches.tar.gz ~/caches.tar.gz
            mkdir -p ~/.gradle/caches/
            tar -xzvf ~/caches.tar.gz -C ~/.gradle/caches/ .
      - run:
          name: Gradle Build Prime
          command:  ./gradlew clean prime:build -info -s -x test -x integration
      # - run:
      #     name: Gradle Build OCSGW 
      #     command: |
      #       ./gradlew clean ocsgw:build  -s     
      - run:
          name: Push Gradle cache
          command: |
            rm -f ~/.gradle/caches/modules-2/modules-2.lock
            rm -fr ~/.gradle/caches/*/plugin-resolution/
            tar -czvf  ~/caches.tar.gz  -C ~/.gradle/caches .
            gsutil cp  ~/caches.tar.gz gs://pi-ostelco-core-gradle-cache
       
      - persist_to_workspace:
          root: ~/project/
          paths:
            - .

      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-dev false       
      
  build-image:
    docker:
      - image: google/cloud-sdk:latest

    working_directory: ~/project

    steps:
      - run:
          name: authenticate with gcloud
          command: |
            # $GOOGLE_GCR_CREDENTIALS env variable contains Google credentials 
            # with permission to write to Google container registry
            echo $GOOGLE_GCR_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project    

      # starts a remote docker environment to run docker commands
      - setup_remote_docker

      - run:
          name: build Prime docker image and push image to GCR
          command: |
            gcloud auth configure-docker --quiet
            TAG=${CIRCLE_SHA1:0:9}
            cd prime
            docker build -t eu.gcr.io/pi-ostelco-dev/prime:$TAG .
            docker push eu.gcr.io/pi-ostelco-dev/prime:$TAG  
      
      # - run:
      #     name: build OCSGW docker image and push image to GCR
      #     command: |
      #       gcloud auth configure-docker --quiet
      #       TAG=${CIRCLE_SHA1:0:9}
      #       cd ocsgw
      #       docker build -t eu.gcr.io/pi-ostelco-dev/ocsgw:$TAG .
      #       docker push eu.gcr.io/pi-ostelco-dev/ocsgw:$TAG   
      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-dev false    
            
  update-dev-endpoints:
    docker:
      - image: eu.gcr.io/pi-ostelco-dev/python-gcloud
    steps: 
      - checkout
      - run:
          name: update endpoints spec
          command: |  
            export CLOUDSDK_CORE_PROJECT=${DEV_PROJECT}
            echo $GOOGLE_DEV_ENDPOINTS_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            
            python -m grpc_tools.protoc --include_imports --include_source_info --proto_path=ocs-grpc-api/src/main/proto --descriptor_set_out=ocs_descriptor.pb ocs.proto
            python -m grpc_tools.protoc --include_imports --include_source_info --proto_path=analytics-grpc-api/src/main/proto --descriptor_set_out=metrics_descriptor.pb prime_metrics.proto
            gcloud endpoints services deploy ocs_descriptor.pb prime/infra/new-dev/ocs-api.yaml
            gcloud endpoints services deploy metrics_descriptor.pb prime/infra/new-dev/metrics-api.yaml
            gcloud endpoints services deploy prime/infra/new-dev/prime-client-api.yaml
      
      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-dev false       
            
  deploy-to-dev:

    working_directory: ~/project

    docker:
    - image: praqma/gcloud-kubectl-helm:v2.8.1
      environment: 
        PROJECT: pi-ostelco-dev
        CLUSTER: pi-dev
        ZONE: europe-west1-c
        SERVICE_ACCOUNT: terraform-dev-cluster@pi-ostelco-dev.iam.gserviceaccount.com
    steps:
      - checkout
      
      - run:
          name: deploy prime to the dev cluster
          command: |
            export GOOGLE_CREDENTIALS=${PI_DEV_CLUSTER_CREDENTIALS}
            /authenticate.bash
            helm repo add ostelco https://storage.googleapis.com/pi-ostelco-helm-charts-repo/
            helm repo update
            helm upgrade prime ostelco/prime --install --namespace dev \
             -f .circleci/prime-dev-values.yaml \
             --set prime.env.STRIPE_API_KEY=${STRIPE_API_KEY} \
             --set prime.tag=${CIRCLE_SHA1:0:9} \
             --set firebaseServiceAccount=${PANTEL_SECRETS_FILE}
       
      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-dev false        
           
  create-PR-to-master:
    working_directory: ~/project

    docker:
    - image: eu.gcr.io/pi-ostelco-dev/github-hub:2.5.0

    steps:
      - checkout
      - run:
          name: create PR to merge develop into master
          command: |
            export PRIME_TAG=${CIRCLE_SHA1:0:9}
            cd .circleci 
            ./substitute_prime_tag.sh
            git config --global user.email "${GIT_USER_EMAIL}"
            git config --global user.name "${GIT_USER_NAME}"
            git add prime-prod-values.yaml
            git commit -m "[ci skip] updating prime image tag to the latest built image."
            git push https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/ostelco/ostelco-core.git circleci-dev
            hub pull-request -m "merging develop into master" -b master
      
      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-dev false 

  ### JOBS FOR  on-PR-merge-to-master PIPELINE
  update-prod-endpoints:
    docker:
      - image: eu.gcr.io/pi-ostelco-dev/python-gcloud
    steps: 
      - checkout
      - run:
          name: update endpoints spec
          command: |  
            export CLOUDSDK_CORE_PROJECT=${PROD_PROJECT}
            echo $GOOGLE_PROD_ENDPOINTS_CREDENTIALS > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            
            python -m grpc_tools.protoc --include_imports --include_source_info --proto_path=ocs-grpc-api/src/main/proto --descriptor_set_out=ocs_descriptor.pb ocs.proto
            python -m grpc_tools.protoc --include_imports --include_source_info --proto_path=analytics-grpc-api/src/main/proto --descriptor_set_out=metrics_descriptor.pb prime_metrics.proto
            gcloud endpoints services deploy ocs_descriptor.pb prime/infra/new-prod/ocs-api.yaml
            gcloud endpoints services deploy metrics_descriptor.pb prime/infra/new-prod/metrics-api.yaml
            gcloud endpoints services deploy prime/infra/new-prod/prime-client-api.yaml
      
      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-master false       
  
  deploy-to-prod:
    docker:
    - image: praqma/gcloud-kubectl-helm:v2.8.1
      environment: 
        PROJECT: pi-ostelco-prod
        CLUSTER: pi-prod
        ZONE: europe-west1-c
        SERVICE_ACCOUNT: terraform-manage-cluster-from@pi-ostelco-prod.iam.gserviceaccount.com

    steps:
      - checkout
      - run:
          name: deploy prime to the prod cluster
          command: |
            export GOOGLE_CREDENTIALS=${PI_PROD_CLUSTER_CREDENTIALS}
            #export TAG=$(git rev-parse --short=9 origin/circleci-dev) # fragile, gives latest develop commit but that may not be the correct tag!
            /authenticate.bash
            helm repo add ostelco https://storage.googleapis.com/pi-ostelco-helm-charts-repo/
            helm repo update
            helm upgrade prime ostelco/prime --version 0.3.1 --install --namespace prod \
             -f .circleci/prime-prod-values.yaml \
             --set prime.env.STRIPE_API_KEY=${STRIPE_API_KEY} \
             --set firebaseServiceAccount=${PANTEL_SECRETS_FILE}

      - run:
           name: notify slack on failure
           when: on_fail
           command: .circleci/notify-slack.sh on-PR-merge-to-master false        
 
workflows:
  version: 2
  on-feature-branch-commit:
    jobs:
      - build-test-repo:
          filters:
            branches:
              only: /feature/.*/
      - code-coverage:
         requires:
           - build-test-repo

  on-PR-merge-to-dev:
    jobs:
    - build-code:
        filters:
          branches:
            only:
            - develop
    - build-image:
        requires:
          - build-code
    - update-dev-endpoints:
        requires:
          - build-image        
    - deploy-to-dev:
        requires:
          - update-dev-endpoints
    - create-PR-to-master:
        requires:
          - deploy-to-dev

  deploy-to-prod:
    jobs:
    - update-prod-endpoints:
        filters:
          branches:
            only: 
            - master
    - deploy-to-prod:
        requires:
          - update-prod-endpoints