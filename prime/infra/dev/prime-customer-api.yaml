swagger: "2.0"
info:
  title: "Ostelco API"
  description: "The customer API."
  version: "1.0.0"
host: "api.dev.oya.world"
x-google-endpoints:
  - name: "api.dev.oya.world"
    allowCors: true
schemes:
  - "https"
paths:
  "/customer/stripe-ephemeral-key":
    get:
      description: "Get Stripe Ephemeral key."
      produces:
        - application/json
      operationId: "getStripeEphemeralKey"
      parameters:
        - name: api_version
          in: query
          description: "Stripe API version"
          type: string
          format: email
      responses:
        200:
          description: "Get Stripe Ephemeral key."
          schema:
            type: string
      security:
        - auth0_jwt: []
  "/context":
    get:
      description: "Get context which is customer and region details."
      produces:
        - application/json
      operationId: "getContext"
      responses:
        200:
          description: "Get the customer context."
          schema:
            $ref: '#/definitions/Context'
        404:
          description: "Customer not found."
      security:
        - auth0_jwt: []
  "/customer":
    get:
      description: "Get customer info (email-id present in the bearer token)."
      produces:
        - application/json
      operationId: "getCustomer"
      responses:
        200:
          description: "Get the customer info."
          schema:
            $ref: '#/definitions/Customer'
        404:
          description: "Customer not found."
      security:
        - auth0_jwt: []
    post:
      description: "Create a new customer."
      consumes:
        - application/json
      produces:
        - application/json
      operationId: "createCustomer"
      parameters:
        - name: nickname
          in: query
          description: "Nickname of the customer"
          type: string
          required: true
        - name: contactEmail
          in: query
          description: "Contact Email of the customer"
          type: string
          required: true
        - name: referredBy
          in: query
          description: "Referral ID of user who has invited this user"
          type: string
      responses:
        201:
          description: "Successfully created the customer."
          schema:
            $ref: '#/definitions/Customer'
        400:
          description: "Incomplete customer info"
        500:
          description: "Failed to store customer"
      security:
        - auth0_jwt: []
    put:
      description: "Update an existing customer."
      consumes:
        - application/json
      produces:
        - application/json
      operationId: "updateCustomer"
      parameters:
        - name: nickname
          in: query
          description: "Nickname of the customer"
          type: string
        - name: contactEmail
          in: query
          description: "Contact Email of the customer"
          type: string
      responses:
        200:
          description: "Successfully updated the customer."
          schema:
            $ref: '#/definitions/Customer'
        400:
          description: "Incomplete Customer info."
        404:
          description: "Customer not found."
        500:
          description: "Failed to update customer info."
      security:
        - auth0_jwt: []
    delete:
      description: "Remove customer."
      produces:
        - application/json
      operationId: "removeCustomer"
      responses:
        204:
          description: "Remove customer."
        404:
          description: "Customer not found."
      security:
        - auth0_jwt: []
  "/regions":
    get:
      description: "Get all regions and region details like SIM Profiles for that region."
      produces:
        - application/json
      operationId: "getAllRegions"
      responses:
        200:
          description: "List of all Region Details"
          schema:
            $ref: '#/definitions/RegionDetailsList'
      security:
        - auth0_jwt: []
  "/regions/{regionCode}":
    get:
      description: "Get region details like SIM Profiles for a region."
      produces:
        - application/json
      operationId: "getRegion"
      parameters:
        - name: regionCode
          in: path
          description: "Region code"
          required: true
          type: string
      responses:
        200:
          description: "Region Details for a region"
          schema:
            $ref: '#/definitions/RegionDetails'
        404:
          description: "Region not found."
      security:
        - auth0_jwt: []
  "/regions/{regionCode}/kyc/jumio/scans":
    post:
      description: "Get a new Id for eKYC scanning."
      produces:
        - application/json
      operationId: "createNewJumioKycScanId"
      parameters:
        - name: regionCode
          in: path
          description: "Region code"
          required: true
          type: string
      responses:
        201:
          description: "Successfully retrieved new ScanId."
          schema:
            $ref: '#/definitions/ScanInformation'
        404:
          description: "Region not found."
      security:
        - auth0_jwt: []
  "/regions/{regionCode}/kyc/jumio/scans/{scanId}":
    get:
      description: "Get status of eKYC scan."
      produces:
        - application/json
      operationId: "getScan"
      parameters:
        - name: regionCode
          in: path
          description: "Region code"
          required: true
          type: string
        - name: scanId
          in: path
          description: "Id of the scan being queried"
          required: true
          type: string
      responses:
        200:
          description: "Successfully retrieved Scan information."
          schema:
            $ref: '#/definitions/ScanInformation'
        404:
          description: "Region or Scan not found."
      security:
        - auth0_jwt: []
  "/regions/sg/kyc/myInfo/{authorisationCode}":
    get:
      description: "Get Customer Data from Singapore MyInfo service."
      produces:
        - application/json
      operationId: "getCustomerMyInfoData"
      parameters:
        - name: authorisationCode
          in: path
          description: "Authorisation Code"
          required: true
          type: string
      responses:
        200:
          description: "Successfully retrieved Customer Data from MyInfo service."
          schema:
            type: object
        404:
          description: "Person Data not found."
      security:
        - auth0_jwt: []
  "/regions/sg/kyc/dave/{nricFinId}":
    get:
      description: "Get Customer Data from Singapore MyInfo service."
      produces:
        - application/json
      operationId: "checkNricFinId"
      parameters:
        - name: nricFinId
          in: path
          description: "NRIC/FIN ID for Singapore"
          required: true
          type: string
      responses:
        204:
          description: "Successfully verified Singapore's NRIC/FIN ID for the Customer."
        400:
          description: "Invalid NRIC/FIN ID"
      security:
        - auth0_jwt: []
  "/regions/sg/kyc/profile":
    put:
      description: "Update Singapore Customer's address and phone number."
      produces:
        - application/json
      operationId: "updateDetails"
      parameters:
        - name: address
          in: query
          description: "Customer's Address"
          required: true
          type: string
        - name: phoneNumber
          in: query
          description: "Customer's phone number"
          required: true
          type: string
      responses:
        204:
          description: "Successfully updated customer's details."
      security:
        - auth0_jwt: []
  "/regions/{regionCode}/simProfiles":
    get:
      description: "Get SIM profile for the user (identified by bearer token)."
      produces:
        - application/json
      operationId: "getSimProfiles"
      parameters:
        - name: regionCode
          in: path
          description: "Region code"
          required: true
          type: string
      responses:
        200:
          description: "Get SIM profiles for this user."
          schema:
            $ref: '#/definitions/SimProfileList'
        404:
          description: "Not allowed for this region, or No SIM profiles found for this user for this region."
        500:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
    post:
      description: "Provision SIM Profile for the user (identified by bearer token)."
      produces:
        - application/json
      operationId: "provisionSimProfile"
      parameters:
        - name: regionCode
          in: path
          description: "Region code"
          required: true
          type: string
        - name: profileType
          in: query
          description: "Profile Type"
          type: string
      responses:
        201:
          description: "Provisioned SIM profile for this user."
          schema:
            $ref: '#/definitions/SimProfile'
        400:
          description: "Not allowed for this region, or missing parameters."
        500:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
  "/regions/{regionCode}/subscriptions":
    get:
      description: "Get subscription (msisdn) for the user (identified by bearer token)."
      produces:
        - application/json
      operationId: "getSubscriptionsForRegion"
      parameters:
        - name: regionCode
          in: path
          description: "Region code"
          required: true
          type: string
      responses:
        200:
          description: "Get subscriptions for a region for this user."
          schema:
            $ref: '#/definitions/SubscriptionList'
        404:
          description: "No subscription found for this user."
      security:
        - auth0_jwt: []
  "/subscriptions":
    get:
      description: "Get subscription (msisdn) for the user (identified by bearer token)."
      produces:
        - application/json
      operationId: "getSubscriptions"
      responses:
        200:
          description: "Get subscriptions for this user."
          schema:
            $ref: '#/definitions/SubscriptionList'
        404:
          description: "No subscription found for this user."
      security:
        - auth0_jwt: []
  "/applicationToken":
    post:
      description: "Store application token"
      consumes:
        - application/json
      produces:
        - application/json
      operationId: "storeApplicationToken"
      parameters:
        - name: applicationToken
          in: body
          description: application token
          schema:
            $ref: '#/definitions/ApplicationToken'
      responses:
        201:
          description: "Successfully stored token."
          schema:
            $ref: '#/definitions/ApplicationToken'
        400:
          description: "Token malformed. Not able to store"
        404:
          description: "User not found."
        500:
          description: "Not able to store token."
      security:
        - auth0_jwt: []
  "/paymentSources":
    get:
      description: "Get all payment sources for the user."
      produces:
        - application/json
      operationId: "listSources"
      responses:
        200:
          description: "List of payment sources."
          schema:
            $ref: '#/definitions/PaymentSourceList'
        404:
          description: "No user found."
        503:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
    post:
      description: "Add a new payment source for user"
      produces:
        - application/json
      operationId: "createSource"
      parameters:
        - name: sourceId
          in: query
          description: "The stripe-id of the source to be added to user"
          required: true
          type: string
      responses:
        201:
          description: "Successfully added source to user"
          schema:
            $ref: '#/definitions/PaymentSource'
        400:
          description: "Invalid source"
        404:
          description: "User not found."
        500:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
    put:
      description: "Set the source as default for user"
      produces:
        - application/json
      operationId: "setDefaultSource"
      parameters:
        - name: sourceId
          in: query
          description: "The stripe-id of the default source"
          required: true
          type: string
      responses:
        200:
          description: "Successfully set as default source to user"
          schema:
            $ref: '#/definitions/PaymentSource'
        400:
          description: "Invalid source"
        404:
          description: "User not found."
        500:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
    delete:
      description: "Remove a payment source for user"
      produces:
        - application/json
      operationId: "removeSource"
      parameters:
        - name: sourceId
          in: query
          description: "The stripe-id of the source to be removed"
          required: true
          type: string
      responses:
        200:
          description: "Successfully removed the source"
          schema:
            $ref: '#/definitions/PaymentSource'
        400:
          description: "Invalid source, or The source could not be removed"
        404:
          description: "No such source for user"
        500:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
  "/products":
    get:
      description: "Get all products for the user."
      produces:
        - application/json
      operationId: "getAllProducts"
      responses:
        200:
          description: "List of products."
          schema:
            $ref: '#/definitions/ProductList'
        404:
          description: "No products found for the user."
      security:
        - auth0_jwt: []
  "/products/{sku}/purchase":
    post:
      description: "Buy the product specified in sku parameter."
      produces:
        - application/json
        - text/plain
      operationId: "purchaseProduct"
      parameters:
        - name: sku
          in: path
          description: "SKU to be purchased"
          required: true
          type: string
        - name: sourceId
          in: query
          description: "The stripe-id of the source to be used for this purchase (if empty, use default source)"
          required: false
          type: string
        - name: saveCard
          in: query
          description: "Whether to save this card as a source for this user (default = false)"
          required: false
          type: boolean
      responses:
        201:
          description: "Successfully purchased the product."
          schema:
            $ref: '#/definitions/Product'
        404:
          description: "Product not found."
      security:
        - auth0_jwt: []
  "/purchases":
    get:
      description: "Get list of all purchases."
      produces:
        - application/json
        - text/plain
      operationId: "getPurchaseHistory"
      responses:
        200:
          description: "List of Purchase Records."
          schema:
            $ref: '#/definitions/PurchaseRecordList'
        400:
          description: "Not allowed to charge this source"
        404:
          description: "No Purchase Records found for the user."
        500:
          description: "Service Unavailable"
      security:
        - auth0_jwt: []
  "/bundles":
    get:
      description: "Get bundles (balance) for the user (identified by bearer token)."
      produces:
        - application/json
      operationId: "getBundles"
      responses:
        200:
          description: "Get bundles for this user."
          schema:
            $ref: '#/definitions/BundleList'
        404:
          description: "No bundle found for this user."
      security:
        - auth0_jwt: []
  "/referred":
    get:
      description: "Get list of people whom the user has referred to."
      produces:
        - application/json
      operationId: "getReferred"
      responses:
        200:
          description: "List of people whom this person has referred to."
          schema:
            $ref: '#/definitions/PersonList'
        404:
          description: "No referrals found for this user."
      security:
        - auth0_jwt: []
  "/referred/by":
    get:
      description: "Get the people who had referred this user."
      produces:
        - application/json
      operationId: "getReferredBy"
      responses:
        200:
          description: "List of people whom this person has referred to."
          schema:
            $ref: '#/definitions/Person'
        404:
          description: "No 'referred by' found for this user."
      security:
        - auth0_jwt: []
  "/graphql":
    post:
      description: "GraphQL endpoint"
      consumes:
        - application/json
      produces:
        - application/json
      operationId: "graphql"
      responses:
        200:
          description: "Success"
          schema:
            type: object
        404:
          description: "Not found"
      security:
        - auth0_jwt: []
      parameters:
        - name: "request"
          in: body
          description: "GraphQL Request."
          schema:
            $ref: '#/definitions/GraphQLRequest'

definitions:
  Context:
    type: object
    properties:
      customer:
        $ref: '#/definitions/Customer'
      regions:
        $ref: '#/definitions/RegionDetailsList'
  Customer:
    type: object
    properties:
      id:
        type: string
      nickname:
        type: string
      contactEmail:
        type: string
        format: email
      analyticsId:
        type: string
      referralId:
        type: string
    required:
      - name
      - email
  RegionDetailsList:
    type: array
    items:
      $ref: '#/definitions/RegionDetails'
  RegionDetails:
    type: object
    properties:
      region:
        $ref: '#/definitions/Region'
      status:
        description: "Customer Status for this region"
        type: string
        enum: [ PENDING, APPROVED ]
      kycStatusMap:
        description: "Map of status for each KYC"
        type: object
        properties:
          kycType:
            $ref: '#/definitions/KycType'
        additionalProperties:
          $ref: '#/definitions/KycStatus'
        example:
          JUMIO: PENDING
          MY_INFO: APPROVED
          NRIC_FIN: REJECTED
          ADDRESS_AND_PHONE_NUMBER: PENDING
      simProfiles:
        $ref: '#/definitions/SimProfileList'
  KycType:
    type: string
    enum: [ JUMIO, MY_INFO, NRIC_FIN, ADDRESS_AND_PHONE_NUMBER ]
  KycStatus:
    type: string
    enum: [ PENDING, REJECTED, APPROVED ]
  Region:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
  SubscriptionList:
    type: array
    items:
      $ref: '#/definitions/Subscription'
  Subscription:
    type: object
    properties:
      msisdn:
        description: "Mobile number for this subscription"
        type: string
  BundleList:
    type: array
    items:
      $ref: '#/definitions/Bundle'
  Bundle:
    type: object
    properties:
      id:
        description: "Bundle ID"
        type: string
      balance:
        description: "Balance units in this bundle"
        type: integer
        format: int64
  PurchaseRecordList:
    type: array
    items:
      $ref: '#/definitions/PurchaseRecord'
  PurchaseRecord:
    type: object
    properties:
      id:
        description: "Purchase Record ID"
        type: string
      msisdn:
        description: "Deprecated: The MSISDN for which the purchase was made."
        type: string
      timestamp:
        description: "The time stamp of the purchase"
        type: integer
        format: int64
      product:
        $ref: '#/definitions/Product'
      refund:
        $ref: '#/definitions/Refund'
    required:
      - timestamp
      - product
  ProductList:
    type: array
    items:
      $ref: '#/definitions/Product'
  Product:
    type: object
    properties:
      sku:
        description: "A unique Id representing a SKU"
        type: string
      price:
        $ref: '#/definitions/Price'
      properties:
        type: object
      presentation:
        type: object
    required:
      - sku
      - price
  ProductInfo:
    type: object
    properties:
      id:
        description: "A unique Id representing a SKU"
        type: string
    required:
      - id
  Refund:
    type: object
    properties:
      id:
        description: "A unique Id representing a refund object"
        type: string
      reason:
        description: "Reason provided while refunding"
        type: string
      timestamp:
        description: "The time stamp of the refund"
        type: integer
        format: int64
    required:
      - id
      - reason
      - timestamp
  PaymentSourceList:
    type: array
    items:
      $ref: '#/definitions/PaymentSource'
  PaymentSource:
    type: object
    properties:
      id:
        description: "The identifier for the source"
        type: string
      type:
        description: "The type of source"
        type: string
      details:
        description: "All information stored with the source"
        type: object
        additionalProperties: true
    required:
      - id
      - type
  Price:
    type: object
    properties:
      amount:
        description: "A positive integer in the smallest currency unit"
        type: integer
        minimum: 0
      currency:
        description: "ISO 4217 currency code (three letter alphabetic code)"
        type: string
    required:
      - amount
      - currency
  ApplicationToken:
    type: object
    properties:
      token:
        description: "Application token"
        type: string
      applicationID:
        description: "Uniquely identifier for the app instance"
        type: string
      tokenType:
        description: "Type of application token (FCM)"
        type: string
    required:
      - token
      - applicationID
  Person:
    type: object
    properties:
      name:
        type: string
    required:
      - name
  PersonList:
    type: array
    items:
      $ref: '#/definitions/Person'
  Plan:
    type: object
    properties:
      name:
        description: "An unique name representing the plan"
        type: string
      price:
        $ref: '#/definitions/Price'
      interval:
        description: "The recurring period for the plan"
        type: string
        enum: [ day, week, month, year ]
      intervalCount:
        description: "Number of intervals in a period"
        type: integer
        default: 1
        minimum: 1
      properties:
        description: "Free form key/value pairs"
        type: object
        additionalProperties: true
      presentation:
        description: "Pretty print version of plan"
        type: object
        additionalProperties: true
    required:
      - name
      - price
      - interval
  PlanList:
    type: array
    items:
      $ref: '#/definitions/Plan'
  GraphQLRequest:
    type: object
    properties:
      query:
        description: "GraphQL query."
        type: string
      operationName:
        description: "GraphQL Operation Name."
        type: string
      variables:
        description: "GraphQL query variables."
        type: object
  ScanInformationList:
    type: array
    items:
      $ref: '#/definitions/ScanInformation'
  ScanInformation:
    type: object
    properties:
      scanId:
        description: "New scan Id for eKYC"
        type: string
      regionCode:
        description: "Region code"
        type: string
      status:
        description: "The status of the scan"
        type: string
      scanResult:
        description: "The result from the vendor"
        type: object
    required:
      - scanId
      - status
  SimProfileList:
    type: array
    items:
      $ref: '#/definitions/SimProfile'
  SimProfile:
    type: object
    properties:
      iccId:
        description: "ID of Sim Profile"
        type: string
      eSimActivationCode:
        description: "eSIM activation code"
        type: string
      status:
        description: "The status of the SIM profile, e.g. INSTALLED"
        type: string
        enum: [ AVAILABLE_FOR_DOWNLOAD, DOWNLOADED, INSTALLED, ENABLED ]
      alias:
        description: "Human readable optional alias for this subscription"
        type: string
    required:
      - iccId
      - activationCode
      - status
securityDefinitions:
  auth0_jwt:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://auth-dev.oya.world/"
    x-google-jwks_uri: "https://auth-dev.oya.world/.well-known/jwks.json"
    x-google-audiences: "http://google_api"
