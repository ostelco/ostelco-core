swagger: "2.0"
info:
  title: "Houston Admin API"
  description: "The APIs for the Houston Admin Client."
  version: "1.0.0"
host: "houston-api.dev.oya.world"
x-google-endpoints:
  - name: "houston-api.dev.oya.world"
    allowCors: true
schemes:
  - "https"
paths:
  "/profiles/{id}":
    get:
      description: "Get profile for the given email-id or msisdn (url encoded)."
      produces:
      - application/json
      operationId: "getCustomer"
      responses:
        200:
          description: "Get the profile for this user."
          schema:
            $ref: '#/definitions/Profile'
        404:
          description: "Profile not found."
      security:
      - auth0_jwt: []
      parameters:
      - name: id
        in: path
        description: "The id of the user (msisdn or email)"
        required: true
        type: string
  "/profiles/{email}/subscriptions":
    get:
      description: "Get subscription (msisdn) for the user."
      produces:
        - application/json
      operationId: "getSubscriptions"
      responses:
        200:
          description: "Get subscriptions for this user."
          schema:
            $ref: '#/definitions/SubscriptionList'
        404:
          description: "No subscription found for this user."
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the user"
          required: true
          type: string
  "/profiles/{email}/scans":
    get:
      description: "Get eKYC scan information for the user."
      produces:
        - application/json
      operationId: "getAllScanInformation"
      responses:
        200:
          description: "Retrieved scan information for this user."
          schema:
            $ref: '#/definitions/ScanInformationList'
        404:
          description: "No scan information found for this user."
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the user"
          required: true
          type: string
  "/profiles/{email}/plans":
    get:
      description: "Get all plans subscribed to by a customer"
      produces:
        - application/json
      operationId: "getPlans"
      security:
        - auth0_jwt: []
      responses:
        200:
          description: "Plans subscribed to"
          schema:
            $ref: '#/definitions/PlanList'
        404:
          description: "No plans found"
      parameters:
        - name: email
          in: path
          description: "The email of the customer"
          required: true
          type: string
  "/profiles/{email}/plans/{planId}":
    post:
      description: "Subscribe a customer to a plan"
      produces:
        - application/json
        - text/plain
      operationId: "attachPlan"
      responses:
        201:
          description: "The subscription was created successfully"
        400:
          description: "Failed to create subscription"
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the customer"
          required: true
          type: string
        - name: planId
          in: path
          description: "The name of the plan to subscribe to"
          required: true
          type: string
    delete:
      description: "Remove a customer from a plan"
      produces:
        - application/json
        - text/plain
      operationId: "detachPlan"
      responses:
        200:
          description: "The subscription was removed successfully"
        400:
          description: "Failed to remove subscription"
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the customer"
          required: true
          type: string
        - name: planId
          in: path
          description: "The name of the plan to remove the subscription for"
          required: true
          type: string
  "/bundles/{email}":
    get:
      description: "Get bundles (balance) for the user (identified by email)."
      produces:
      - application/json
      operationId: "getBundlesByEmail"
      responses:
        200:
          description: "Get bundles for this user."
          schema:
            $ref: '#/definitions/BundleList'
        404:
          description: "No bundle found for this user."
      security:
      - auth0_jwt: []
      parameters:
      - name: email
        in: path
        description: "The email of the user"
        required: true
        type: string
  "/purchases/{email}":
    get:
      description: "Get list of all purchases."
      produces:
      - application/json
      - text/plain
      operationId: "getPurchaseHistoryByEmail"
      responses:
        200:
          description: "List of Purchase Records."
          schema:
            $ref: '#/definitions/PurchaseRecordList'
        403:
          description: "Not allowed to charge this source"
        404:
          description: "No Purchase Records found for the user."
        503:
          description: "Service Unavailable"
      security:
      - auth0_jwt: []
      parameters:
      - name: email
        in: path
        description: "The email of the user"
        required: true
        type: string
  "/refund/{email}":
    put:
      description: "Full refund of a purchase."
      produces:
      - application/json
      - text/plain
      operationId: "refundPurchaseByEmail"
      responses:
        200:
          description: "Purchase is refunded."
          schema:
            type: object
        403:
          description: "Forbidden to refund this Purchase"
        404:
          description: "Purchase record not found"
        502:
          description: "Failed to refund purchase"
      security:
      - auth0_jwt: []
      parameters:
      - name: email
        in: path
        description: "The email of the user"
        required: true
        type: string
      - name: purchaseRecordId
        in: query
        description: "The record id of the purchase to be refunded"
        required: true
        type: string
      - name: reason
        in: query
        description: "The reason for refund"
        required: true
        type: string
  "/notify/{email}":
    put:
      description: "Send notification to a customer."
      produces:
        - application/json
        - text/plain
      operationId: "sendNotificationByEmail"
      responses:
        200:
          description: "Sent notification."
        404:
          description: "Subscriber record not found"
        502:
          description: "Failed to send notification"
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the user"
          required: true
          type: string
        - name: title
          in: query
          description: "The title for the notification"
          required: true
          type: string
        - name: message
          in: query
          description: "The notification message"
          required: true
          type: string
  "/plans":
    get:
      description: "Get plan details"
      produces:
        - application/json
        - text/plain
      operationId: "getPlan"
      responses:
        200:
          description: "Plan details is returned"
          schema:
            $ref: '#/definitions/Plan'
        404:
          description: "No such plan"
      parameters:
        - name: planId
          in: path
          description: "Name of plan to get"
          required: true
          type: string
      security:
        - auth0_jwt: []
    post:
      description: "Create a plan"
      produces:
        - application/json
        - text/plain
      operationId: "createPlan"
      responses:
        201:
          description: "Successfully purchased the plan."
          schema:
            $ref: '#/definitions/Plan'
        400:
          description: "Failed to create the plan"
      parameters:
        - name: plan
          in: body
          description: Plan details
          schema:
            $ref: '#/definitions/Plan'
      security:
        - auth0_jwt: []
    delete:
      description: "Removes a plan"
      produces:
        - application/json
        - text/plain
      operationId: "deletePlan"
      responses:
        200:
          description: "Plan is removed"
          schema:
            $ref: '#/definitions/Plan'
        400:
          description: "Failed to remove plan"
        404:
          description: "No such plan"
      parameters:
        - name: planId
          in: path
          description: "The name of the plan to remove"
          required: true
          type: string
      security:
        - auth0_jwt: []
  "/profiles/{email}/state":
    get:
      description: "Get state of the user."
      produces:
        - application/json
      operationId: "getCustomerState"
      responses:
        200:
          description: "Successfully retrieved the state."
          schema:
            $ref: '#/definitions/SubscriberState'
        404:
          description: "No state information available for this user."
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the user"
          required: true
          type: string
  "/context/{email}":
    get:
      description: "Get context which is customer and region details."
      produces:
        - application/json
      operationId: "getContext"
      responses:
        200:
          description: "Get the customer context."
          schema:
            $ref: '#/definitions/Context'
        404:
          description: "Customer not found."
      security:
        - auth0_jwt: []
      parameters:
        - name: email
          in: path
          description: "The email of the user"
          required: true
          type: string
definitions:
  Context:
    type: object
    properties:
      customer:
        $ref: '#/definitions/Customer'
      regions:
        $ref: '#/definitions/RegionDetailsList'
  Customer:
    type: object
    properties:
      id:
        type: string
      nickname:
        type: string
      contactEmail:
        type: string
        format: email
      analyticsId:
        type: string
      referralId:
        type: string
    required:
      - name
      - email
  RegionDetailsList:
    type: array
    items:
      $ref: '#/definitions/RegionDetails'
  RegionDetails:
    type: object
    properties:
      region:
        $ref: '#/definitions/Region'
      status:
        description: "Customer Status for this region"
        type: string
        enum: [ PENDING, APPROVED ]
      kycStatusMap:
        description: "Map of status for each KYC"
        type: object
        properties:
          kycType:
            $ref: '#/definitions/KycType'
        additionalProperties:
          $ref: '#/definitions/KycStatus'
        example:
          JUMIO: PENDING
          MY_INFO: APPROVED
          NRIC_FIN: REJECTED
          ADDRESS_AND_PHONE_NUMBER: PENDING
      simProfiles:
        $ref: '#/definitions/SimProfileList'
  KycType:
    type: string
    enum: [ JUMIO, MY_INFO, NRIC_FIN, ADDRESS_AND_PHONE_NUMBER ]
  KycStatus:
    type: string
    enum: [ PENDING, REJECTED, APPROVED ]
  MyInfoConfig:
    type: object
    properties:
      url:
        type: string
        description: "URL for MyInfo authorise"
  Region:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
  SimProfileList:
    type: array
    items:
      $ref: '#/definitions/SimProfile'
  SimProfile:
    type: object
    properties:
      iccId:
        description: "ID of Sim Profile"
        type: string
      eSimActivationCode:
        description: "eSIM activation code"
        type: string
      status:
        description: "The status of the SIM profile, e.g. INSTALLED"
        type: string
        enum: [ NOT_READY, AVAILABLE_FOR_DOWNLOAD, DOWNLOADED, INSTALLED, ENABLED ]
      alias:
        description: "Human readable optional alias for this subscription"
        type: string
    required:
      - iccId
      - activationCode
      - status
  Profile:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
      postCode:
        type: string
      city:
        type: string
      country:
        type: string
      email:
        type: string
        format: email
      referralId:
        type: string
    required:
    - email
  SubscriptionList:
    type: array
    items:
      $ref: '#/definitions/Subscription'
  Subscription:
    type: object
    properties:
      msisdn:
        description: "Mobile number for this subscription"
        type: string
      alias:
        description: "Human readable optional alias for this subscription"
        type: string
  BundleList:
    type: array
    items:
      $ref: '#/definitions/Bundle'
  Bundle:
    type: object
    properties:
      id:
        description: "Bundle ID"
        type: string
      balance:
        description: "Balance units in this bundle"
        type: integer
        format: int64
  PurchaseRecordList:
    type: array
    items:
      $ref: '#/definitions/PurchaseRecord'
  PurchaseRecord:
    type: object
    properties:
      id:
        description: "Purchase Record ID"
        type: string
      msisdn:
        description: "Deprecated: The MSISDN for which the purchase was made."
        type: string
      timestamp:
        description: "The time stamp of the purchase"
        type: integer
        format: int64
      product:
        $ref: '#/definitions/Product'
    required:
    - timestamp
    - product
    - end
  Product:
    type: object
    properties:
      sku:
        description: "A unique Id representing a SKU"
        type: string
      price:
        $ref: '#/definitions/Price'
      properties:
        type: object
      presentation:
        type: object
    required:
    - sku
    - price
  Price:
    type: object
    properties:
      amount:
        description: "A positive integer in the smallest currency unit"
        type: integer
        minimum: 0
      currency:
        description: "ISO 4217 currency code (three letter alphabetic code)"
        type: string
    required:
    - amount
    - currency
  Plan:
    type: object
    properties:
      name:
        description: "An unique name representing the plan"
        type: string
      price:
        $ref: '#/definitions/Price'
      interval:
        description: "The recurring period for the plan"
        type: string
        enum: [ day, week, month, year ]
      intervalCount:
        description: "Number of intervals in a period"
        type: integer
        default: 1
        minimum: 1
      properties:
        description: "Free form key/value pairs"
        type: object
        additionalProperties: true
      presentation:
        description: "Pretty print version of plan"
        type: object
        additionalProperties: true
    required:
      - name
      - price
      - interval
  PlanList:
    type: array
    items:
      $ref: '#/definitions/Plan'
  SubscriberState:
    type: object
    properties:
      id:
        description: "User Id"
        type: string
      status:
        description: "Current status of the customer"
        type: string
      modifiedTimestamp:
        description: "Last modified time for the status (Unix timestamp)"
        type: integer
        format: int64
    required:
      - id
      - status
      - modifiedTimestamp
  ScanInformationList:
    type: array
    items:
      $ref: '#/definitions/ScanInformation'
  ScanInformation:
    type: object
    properties:
      scanId:
        description: "New scan Id for eKYC"
        type: string
      countryCode:
        description: "The 3 letter country code (or global) for the scan "
        type: string
      status:
        description: "The status of the scan"
        type: string
      scanResult:
        description: "The result from the vendor"
        type: object
    required:
      - scanId
      - status
securityDefinitions:
  auth0_jwt:
    authorizationUrl: "https://redotter-admin-dev.eu.auth0.com/authorize"
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "https://redotter-admin-dev.eu.auth0.com/"
    x-google-jwks_uri: "https://redotter-admin-dev.eu.auth0.com/.well-known/jwks.json"
    x-google-audiences: "http://google_api"
