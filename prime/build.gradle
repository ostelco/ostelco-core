plugins {
    id "application"
    id "jacoco"
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id 'net.ltgt.apt' version '0.10'
    id "idea"
}

sourceSets {
  test {
    java.srcDirs = ['src/test/java']
  }

  integration {
    java.srcDirs = ['src/test/java', 'src/integration-tests/java']
    resources.srcDir 'src/integration-tests/resources'
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
}

dependencies {
    implementation project(':ocs-api')
    implementation project(':ostelco-lib')
    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation 'com.google.firebase:firebase-admin:5.3.1'
    implementation 'com.google.cloud:google-cloud-pubsub:0.32.0-beta'
    implementation 'com.lmax:disruptor:3.3.7'
    implementation 'com.google.guava:guava:21.0'

    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testCompile 'org.mockito:mockito-core:2.10.0'

    compileOnly 'org.projectlombok:lombok:1.16.20'
    apt 'org.projectlombok:lombok:1.16.20'
}

configurations {
  integrationImplementation.extendsFrom testImplementation
  integrationCompile.extendsFrom testCompile
  integrationRuntime.extendsFrom testRuntime
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integration.output.classesDirs
  classpath = sourceSets.integration.runtimeClasspath
}

shadowJar {
    mainClassName = 'org.ostelco.prime.PrimeApplication'
    mergeServiceFiles()
    classifier = "uber"
    version = null
}

task pack(type: Zip, dependsOn: 'shadowJar') {
    from ('config/') {
        into(project.name + '/config')
    }
    from ('script/') {
        into(project.name + '/script')
    }
    from ('build/libs/prime-uber.jar') {
        into(project.name + '/build/libs/')
    }
    from ('Dockerfile') {
        into(project.name)
    }
    archiveName 'prime.zip'
    destinationDir(file('build/deploy/'))
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

test {
    testLogging {
        exceptionFormat = 'full'
        events "PASSED", "FAILED", "SKIPPED"
    }
}

idea {
    module {
        testSourceDirs += file('src/integration-tests/java')
    }
}